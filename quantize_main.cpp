#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include <assert.h>
#include <conio.h>
#include <emmintrin.h>
//#include <tmmintrin.h>

#define MB_X_REF 68
#define MB_Y_REF 45
#define MB_SIZE 16
#define REF_STRIDE (MB_X_REF*MB_SIZE)
#ifdef _DEBUG
	#define LOOP_TEST_COUNT	1	//to have a larger runtime
	#define LOOP_TEST_COUNT_INTRA	1	//to have a larger runtime
	#define LOOP_TEST_COUNT_INTERP	1	//to have a larger runtime
#else
	#define LOOP_TEST_COUNT	30	//to have a larger runtime
	#define LOOP_TEST_COUNT_INTRA	20	//to have a larger runtime
	#define LOOP_TEST_COUNT_INTERP	60	//to have a larger runtime
#endif

#define SIGN(type, x)	( ((x) >> (8*sizeof(type) - 1)) | (UINT) 0x01 )		// ( (x) >= 0 ? 1 : -1 )
#define CAVLC_LEVEL_LIMIT	2063

typedef ULONGLONG		QWORD;

short quant_coef_16x16[6][16*16] = 
{
	{
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
	},
	{
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
	},
	{
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
	},
	{
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
	},
	{
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
	},
	{
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
	}
};


int quant_coef_16x16_i[6][16*16] = 
{
	{
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
		13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 13107,  8066, 
		 8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243,  8066,  5243, 
	},
	{
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
		11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 11916,  7490, 
		 7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660,  7490,  4660, 
	},
	{
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
		10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 10082,  6554, 
		 6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194,  6554,  4194, 
	},
	{
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
		 9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825,  9362,  5825, 
		 5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647,  5825,  3647, 
	},
	{
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
		 8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243,  8192,  5243, 
		 5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355,  5243,  3355, 
	},
	{
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
		 7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559,  7282,  4559, 
		 4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893,  4559,  2893, 
	}
};

int offset_intra_default_intra[256+16] =
{
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184,
	349184,349184,349184,349184
};

inline void quantize_w16_block_intr( short *src, short *qc, int *qp_ct, int q_bits, int h, QWORD *HIGH_LIMIT )
{
	const short *src_ptr = src;
	const short *qc_ptr = qc;
	const int *qp_ct_ptr = qp_ct;

	__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, s1, s2, s3, s4;

	for( int i = 0; i < h; i++)
	{
		r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
		r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
		r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
		r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));
		q0 = _mm_loadl_epi64((__m128i*)(qc_ptr));
		q1 = _mm_loadl_epi64((__m128i*)(qc_ptr+4));
		q2 = _mm_loadl_epi64((__m128i*)(qc_ptr+8));
		q3 = _mm_loadl_epi64((__m128i*)(qc_ptr+12));
		r4 = r0;
		r5 = r1;
		r6 = r2;
		r7 = r3;
		r4 = _mm_srai_epi16(r4, 15);
		r5 = _mm_srai_epi16(r5, 15);
		r6 = _mm_srai_epi16(r6, 15);
		r7 = _mm_srai_epi16(r7, 15);
		r0 = _mm_xor_si128(r0, r4);
		r1 = _mm_xor_si128(r1, r5);
		r2 = _mm_xor_si128(r2, r6);
		r3 = _mm_xor_si128(r3, r7);
		r0 = _mm_sub_epi16(r0, r4);
		r1 = _mm_sub_epi16(r1, r5);
		r2 = _mm_sub_epi16(r2, r6);
		r3 = _mm_sub_epi16(r3, r7);
		s1 = r4;
		s2 = r5;
		s3 = r6;
		s4 = r7;
		r4 = _mm_mulhi_epi16(r0, q0);
		r5 = _mm_mulhi_epi16(r1, q1);
		r6 = _mm_mulhi_epi16(r2, q2);
		r7 = _mm_mulhi_epi16(r3, q3);
		r0 = _mm_mullo_epi16(r0, q0);
		r1 = _mm_mullo_epi16(r1, q1);
		r2 = _mm_mullo_epi16(r2, q2);
		r3 = _mm_mullo_epi16(r3, q3);
		q0 = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
		q1 = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
		q2 = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
		q3 = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));
		r0 = _mm_unpacklo_epi16(r0, r4);
		r1 = _mm_unpacklo_epi16(r1, r5);
		r2 = _mm_unpacklo_epi16(r2, r6);
		r3 = _mm_unpacklo_epi16(r3, r7);
		r0 = _mm_add_epi32(r0, q0);
		r1 = _mm_add_epi32(r1, q1);
		r2 = _mm_add_epi32(r2, q2);
		r3 = _mm_add_epi32(r3, q3);
		r0 = _mm_srli_epi32(r0, q_bits);
		r1 = _mm_srli_epi32(r1, q_bits);
		r2 = _mm_srli_epi32(r2, q_bits);
		r3 = _mm_srli_epi32(r3, q_bits);
		r0 = _mm_packs_epi32(r0, r0);
		r1 = _mm_packs_epi32(r1, r1);
		r2 = _mm_packs_epi32(r2, r2);
		r3 = _mm_packs_epi32(r3, r3);

		//check if src == 
		if((*HIGH_LIMIT) != 0)
		{
			r4 = _mm_loadl_epi64((__m128i*)HIGH_LIMIT);
			r5 = _mm_loadl_epi64((__m128i*)HIGH_LIMIT);
			r6 = _mm_loadl_epi64((__m128i*)HIGH_LIMIT);
			r0 = _mm_adds_epu16(r0, r4);
			r1 = _mm_adds_epu16(r1, r5);
			r2 = _mm_adds_epu16(r2, r6);
			r3 = _mm_adds_epu16(r3, r4);
			r0 = _mm_subs_epu16(r0, r5);
			r1 = _mm_subs_epu16(r1, r6);
			r2 = _mm_subs_epu16(r2, r4);
			r3 = _mm_subs_epu16(r3, r5);
		}

		r4 = s1;
		r5 = s2;
		r6 = s3;
		r7 = s4;
		r0 = _mm_xor_si128(r0, r4);
		r1 = _mm_xor_si128(r1, r5);
		r2 = _mm_xor_si128(r2, r6);
		r3 = _mm_xor_si128(r3, r7);
		r0 = _mm_sub_epi16(r0, r4);
		r1 = _mm_sub_epi16(r1, r5);
		r2 = _mm_sub_epi16(r2, r6);
		r3 = _mm_sub_epi16(r3, r7);

		_mm_storel_epi64((__m128i*)(src_ptr), r0);
		_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
		_mm_storel_epi64((__m128i*)(src_ptr+2*4), r2);
		_mm_storel_epi64((__m128i*)(src_ptr+3*4), r3);

		src_ptr += 16;
		qc_ptr += 16;
		qp_ct_ptr += 16;

	}
}

void quantize_w16_block_C(short *src, short *qc, int *qp_ct, int _q_bits, int h, QWORD *HIGH_LIMIT)
{
	short *qs = qc;
	INT *qp_const = qp_ct;

	INT i,j;
	for( i = 0; i < h; i++ )
	{
		for( j = 0; j < 16; j++ )
		{
			INT sign;

			sign = SIGN(short, src[j]);
			src[j] = (abs(src[j]) * qs[j] + qp_const[j] ) >> _q_bits;

			if( *HIGH_LIMIT && src[j] > CAVLC_LEVEL_LIMIT )	
				src[j] = CAVLC_LEVEL_LIMIT;

			src[j] *= sign;
		}

		src += 16;
		qs += 16;
		qp_const += 16;
	}
}

void quantize_w16_block_C2(short *src, short *qc, int *qp_ct, int _q_bits, int h, QWORD *HIGH_LIMIT)
{
	short *qs = qc;
	INT *qp_const = qp_ct;

	INT i,j;
	for( i = 0; i < h; i++ )
	{
		for( j = 0; j < 16; j++ )
		{
			INT sign;

			sign = SIGN(short, src[j]);
			int t = (abs(src[j]) * qs[j] + qp_const[j] ) >> _q_bits;

			if( *HIGH_LIMIT && t > CAVLC_LEVEL_LIMIT )	
				t = CAVLC_LEVEL_LIMIT;

			src[j] = t * sign;
		}

		src += 16;
		qs += 16;
		qp_const += 16;
	}
}

inline void quantize_w16_block_intr1( short *src, short *qc, int *qp_ct, int _q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	int q_bits = _q_bits;
	const short *src_ptr = src;
	const short *qc_ptr = qc;
	const int *qp_ct_ptr = qp_ct;

	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, s1, s2, s3, s4, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadl_epi64((__m128i*)(qc_ptr));
			q1 = _mm_loadl_epi64((__m128i*)(qc_ptr+4));
			q2 = _mm_loadl_epi64((__m128i*)(qc_ptr+8));
			q3 = _mm_loadl_epi64((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srli_epi32(r0, q_bits);
			r1 = _mm_srli_epi32(r1, q_bits);
			r2 = _mm_srli_epi32(r2, q_bits);
			r3 = _mm_srli_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+2*4), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+3*4), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
	else
	{
		__m128i limit;
		limit = _mm_loadu_si128((__m128i*)HIGH_LIMIT);

		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, s1, s2, s3, s4, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadl_epi64((__m128i*)(qc_ptr));
			q1 = _mm_loadl_epi64((__m128i*)(qc_ptr+4));
			q2 = _mm_loadl_epi64((__m128i*)(qc_ptr+8));
			q3 = _mm_loadl_epi64((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srli_epi32(r0, q_bits);
			r1 = _mm_srli_epi32(r1, q_bits);
			r2 = _mm_srli_epi32(r2, q_bits);
			r3 = _mm_srli_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			r0 = _mm_min_epi16( r0 , limit );
			r1 = _mm_min_epi16( r1 , limit );
			r2 = _mm_min_epi16( r2 , limit );
			r3 = _mm_min_epi16( r3 , limit );

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+2*4), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+3*4), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
}

inline void quantize_w16_block_intr2( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	if((*HIGH_LIMIT) == 0)
	{
		__declspec(align(32)) __m128i limit_low;
		limit_low = _mm_set1_epi16(-32767);

		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srai_epi32(r0, q_bits);
			r1 = _mm_srai_epi32(r1, q_bits);
			r2 = _mm_srai_epi32(r2, q_bits);
			r3 = _mm_srai_epi32(r3, q_bits);

//			q_bits = _mm_castps_si128(_mm_div_ps(_mm_castsi128_ps(r0), _mm_castsi128_ps(q_bits));

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

/*			r0 = _mm_max_epi16( r0 , limit_low );
			r1 = _mm_max_epi16( r1 , limit_low );
			r2 = _mm_max_epi16( r2 , limit_low );
			r3 = _mm_max_epi16( r3 , limit_low );  */

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+8), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+12), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
	else
	{
		__declspec(align(32)) __m128i limit_low;
		limit_low = _mm_set1_epi16(-CAVLC_LEVEL_LIMIT);
		__declspec(align(32)) __m128i limit_high;
		limit_high = _mm_set1_epi16(CAVLC_LEVEL_LIMIT);

		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srai_epi32(r0, q_bits);
			r1 = _mm_srai_epi32(r1, q_bits);
			r2 = _mm_srai_epi32(r2, q_bits);
			r3 = _mm_srai_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			r0 = _mm_min_epi16( r0 , limit_high );
			r1 = _mm_min_epi16( r1 , limit_high );
			r2 = _mm_min_epi16( r2 , limit_high );
			r3 = _mm_min_epi16( r3 , limit_high );

			r0 = _mm_max_epi16( r0 , limit_low );
			r1 = _mm_max_epi16( r1 , limit_low );
			r2 = _mm_max_epi16( r2 , limit_low );
			r3 = _mm_max_epi16( r3 , limit_low ); /**/

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+8), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+12), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
}
/*
inline void quantize_w16_block_intr3( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int _q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	int q_bits = _q_bits;
	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, s1, s2, s3, s4, q0c, q1c, q2c, q3c;
			for(int j=0;j<16;j+=4)
			{
				r0 = _mm_loadl_epi64((__m128i*)(src_ptr+j));
				q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
				q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
				r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
				r0 = _mm_madd_epi16( r0, q0 );
				r0 = _mm_add_epi32(r0, q0c);
				r0 = _mm_srli_epi32(r0, q_bits);
				r0 = _mm_packs_epi32(r0, r0);
				_mm_storel_epi64((__m128i*)(src_ptr+j), r0);
			}
			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
}

inline void quantize_w16_block_intr4( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int _q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	int q_bits = _q_bits;
	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, s1, s2, s3, s4, q0c, q1c, q2c, q3c;
			r0 = _mm_loadu_si128((__m128i*)(src_ptr));
			r2 = _mm_loadu_si128((__m128i*)(src_ptr+8));
			r1 = _mm_srli_epi64(r0, 16);
			r3 = _mm_srli_epi64(r2, 16);

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srli_epi32(r0, q_bits);
			r1 = _mm_srli_epi32(r1, q_bits);
			r2 = _mm_srli_epi32(r2, q_bits);
			r3 = _mm_srli_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+2*4), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+3*4), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
}

inline void quantize_w16_block_intr5( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int _q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	int q_bits = _q_bits;
	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, s1, s2, s3, s4, q0c, q1c, q2c, q3c;
			r0 = _mm_loadu_si128((__m128i*)(src_ptr));
			r1 = _mm_loadu_si128((__m128i*)(src_ptr+4));
			r2 = _mm_loadu_si128((__m128i*)(src_ptr+8));
			r3 = _mm_loadu_si128((__m128i*)(src_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srli_epi32(r0, q_bits);
			r1 = _mm_srli_epi32(r1, q_bits);
			r2 = _mm_srli_epi32(r2, q_bits);
			r3 = _mm_srli_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+8), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+12), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
} */

/*
//works only in vs8, gives an aditional 6% speed boost
inline void quantize_w16_block_intr6( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srai_epi32(r0, q_bits);
			r1 = _mm_srai_epi32(r1, q_bits);
			r2 = _mm_srai_epi32(r2, q_bits);
			r3 = _mm_srai_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+8), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+12), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
	else
	{
		__m128i limit;
		limit = _mm_loadu_si128((__m128i*)HIGH_LIMIT);

		__declspec(align(16)) __m128i limit_low;
		limit_low = _mm_set1_epi16(-2063);
		__declspec(align(16)) __m128i limit_high;
		limit_high = _mm_set1_epi16(2063);

		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			//!we can do this since we know this is less then 2^11
			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			r0 = _mm_alignr_epi8( r0, r1, 8 );
			r2 = _mm_alignr_epi8( r2, r3, 8 );

			r0 = _mm_srai_epi16(r0, q_bits);
			r2 = _mm_srai_epi16(r2, q_bits);

			r0 = _mm_min_epi16( r0 , limit_high );
			r2 = _mm_min_epi16( r2 , limit_high );

			r0 = _mm_max_epi16( r0 , limit_low );
			r2 = _mm_max_epi16( r2 , limit_low );

			_mm_storeu_si128((__m128i*)(src_ptr), r0);
			_mm_storeu_si128((__m128i*)(src_ptr+8), r2);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
} */

inline void quantize_w16_block_intr7( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srai_epi32(r0, q_bits);
			r1 = _mm_srai_epi32(r1, q_bits);
			r2 = _mm_srai_epi32(r2, q_bits);
			r3 = _mm_srai_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+8), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+12), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
	else
	{
		__declspec(align(16)) __m128i limit_low;
		limit_low = _mm_set1_epi16(-CAVLC_LEVEL_LIMIT);
		__declspec(align(16)) __m128i limit_high;
		limit_high = _mm_set1_epi16(CAVLC_LEVEL_LIMIT);

		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			//we can do this here because we know values will be limited to 2^11
			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_packs_epi32(r0, r1);
			r2 = _mm_packs_epi32(r2, r3);

			r0 = _mm_srai_epi16(r0, q_bits);
			r2 = _mm_srai_epi16(r2, q_bits);

			r0 = _mm_min_epi16( r0 , limit_high );
			r2 = _mm_min_epi16( r2 , limit_high );

			r0 = _mm_max_epi16( r0 , limit_low );
			r2 = _mm_max_epi16( r2 , limit_low );

			_mm_storeu_si128((__m128i*)(src_ptr), r0);
			_mm_storeu_si128((__m128i*)(src_ptr+8), r2);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
}

inline void quantize_w16_block_intr8( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	if((*HIGH_LIMIT) == 0)
	{
		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, r2, r3, r4, r5, r6, r7, q0, q1, q2, q3, q0c, q1c, q2c, q3c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));
			r2 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r3 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));
			q2 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q3 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));
			q2c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q3c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32
			r2 = _mm_unpacklo_epi16(r2, r2);	//convert int16 to int32
			r3 = _mm_unpacklo_epi16(r3, r3);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );
			r2 = _mm_madd_epi16( r2, q2 );
			r3 = _mm_madd_epi16( r3, q3 );

			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);
			r2 = _mm_add_epi32(r2, q2c);
			r3 = _mm_add_epi32(r3, q3c);

			r0 = _mm_srai_epi32(r0, q_bits);
			r1 = _mm_srai_epi32(r1, q_bits);
			r2 = _mm_srai_epi32(r2, q_bits);
			r3 = _mm_srai_epi32(r3, q_bits);

			r0 = _mm_packs_epi32(r0, r0);
			r1 = _mm_packs_epi32(r1, r1);
			r2 = _mm_packs_epi32(r2, r2);
			r3 = _mm_packs_epi32(r3, r3);

			_mm_storel_epi64((__m128i*)(src_ptr), r0);
			_mm_storel_epi64((__m128i*)(src_ptr+4), r1);
			_mm_storel_epi64((__m128i*)(src_ptr+8), r2);
			_mm_storel_epi64((__m128i*)(src_ptr+12), r3);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
	else
	{
		__declspec(align(16)) __m128i limit_low;
		limit_low = _mm_set1_epi16(-CAVLC_LEVEL_LIMIT);
		__declspec(align(16)) __m128i limit_high;
		limit_high = _mm_set1_epi16(CAVLC_LEVEL_LIMIT);

		for( int i = 0; i < h; i++)
		{
			__m128i r0, r1, q0, q1, q0c, q1c;
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+4));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+4));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+4));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );

			//we can do this here because we know values will be limited to 2^11
			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);

			r0 = _mm_packs_epi32(r0, r1);
			r0 = _mm_srai_epi16(r0, q_bits);
			r0 = _mm_min_epi16( r0 , limit_high );
			r0 = _mm_max_epi16( r0 , limit_low );

			_mm_storeu_si128((__m128i*)(src_ptr), r0);

			//same thing but for the next 8 bytes
			r0 = _mm_loadl_epi64((__m128i*)(src_ptr+8));
			r1 = _mm_loadl_epi64((__m128i*)(src_ptr+12));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr+8));
			q1 = _mm_loadu_si128((__m128i*)(qc_ptr+12));

			q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+8));
			q1c = _mm_loadu_si128((__m128i*)(qp_ct_ptr+12));

			r0 = _mm_unpacklo_epi16(r0, r0);	//convert int16 to int32
			r1 = _mm_unpacklo_epi16(r1, r1);	//convert int16 to int32

			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q1 );

			//we can do this here because we know values will be limited to 2^11
			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q1c);

			r0 = _mm_packs_epi32(r0, r1);
			r0 = _mm_srai_epi16(r0, q_bits);
			r0 = _mm_min_epi16( r0 , limit_high );
			r0 = _mm_max_epi16( r0 , limit_low );

			_mm_storeu_si128((__m128i*)(src_ptr+8), r0);

			src_ptr += 16;
			qc_ptr += 16;
			qp_ct_ptr += 16;
		}
	}
}

inline void quantize_w16_block_intr9( short *src_ptr, int *qc_ptr, int *qp_ct_ptr, int q_bits, int h, QWORD *HIGH_LIMIT )
{
	// src is the DCT output. DCT is made on 4x4 blocks, max value is 16*255=2^4*2^8=2^12
	// qc is a constant matrix, max value is 13107 = 2^14
	if((*HIGH_LIMIT) == 0)
	{
		__declspec(align(16)) __m128i q0c;
		q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
		for( int i = 0; i < h; i++)
		{
			__declspec(align(16)) __m128i src0, src1;
			__declspec(align(16)) __m128i sign0, sign1;
			__declspec(align(16)) __m128i r0, r1, r2, r3, q0;
			src0 = _mm_loadu_si128((__m128i*)(src_ptr));
			src1 = _mm_loadu_si128((__m128i*)(src_ptr+8));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));

			//extract sign
			sign0 = _mm_srai_epi16(src0, 15);
			sign1 = _mm_srai_epi16(src1, 15);
			//do abs
			src0 = _mm_xor_si128(src0, sign0);
			src1 = _mm_xor_si128(src1, sign1);
			src0 = _mm_sub_epi16(src0, sign0);
			src1 = _mm_sub_epi16(src1, sign1);
			//convert int16 to int32
			r0 = _mm_unpacklo_epi16(src0, src0);	
			r1 = _mm_unpackhi_epi16(src0, src0);	
			r2 = _mm_unpacklo_epi16(src1, src1);	
			r3 = _mm_unpackhi_epi16(src1, src1);	
			//do mult
			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q0 );
			r2 = _mm_madd_epi16( r2, q0 );
			r3 = _mm_madd_epi16( r3, q0 );
			//do add
			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q0c);
			r2 = _mm_add_epi32(r2, q0c);
			r3 = _mm_add_epi32(r3, q0c);
			//scale down
			r0 = _mm_srli_epi32(r0, q_bits);
			r1 = _mm_srli_epi32(r1, q_bits);
			r2 = _mm_srli_epi32(r2, q_bits);
			r3 = _mm_srli_epi32(r3, q_bits);
			//convert to int16
			__m128i dst0, dst1;
			dst0 = _mm_packs_epi32(r0, r1);
			dst1 = _mm_packs_epi32(r2, r3);
			//put back sign
			dst0 = _mm_xor_si128(dst0, sign0);
			dst1 = _mm_xor_si128(dst1, sign1);
			dst0 = _mm_sub_epi16(dst0, sign0);
			dst1 = _mm_sub_epi16(dst1, sign1);
			//store res
			_mm_storeu_si128((__m128i*)(src_ptr), dst0);
			_mm_storeu_si128((__m128i*)(src_ptr+8), dst1);

			src_ptr += 16;
			qc_ptr += 16;
		}
	}
	else
	{
		__declspec(align(16)) __m128i limit_high;
		limit_high = _mm_set1_epi16(CAVLC_LEVEL_LIMIT);

		__declspec(align(16)) __m128i q0c;
		q0c = _mm_loadu_si128((__m128i*)(qp_ct_ptr));
		for( int i = 0; i < h; i++)
		{
			__declspec(align(16)) __m128i src0, src1;
			__declspec(align(16)) __m128i sign0, sign1;
			__declspec(align(16)) __m128i r0, r1, r2, r3, q0;
			src0 = _mm_loadu_si128((__m128i*)(src_ptr));
			src1 = _mm_loadu_si128((__m128i*)(src_ptr+8));

			q0 = _mm_loadu_si128((__m128i*)(qc_ptr));

			//extract sign
			sign0 = _mm_srai_epi16(src0, 15);
			sign1 = _mm_srai_epi16(src1, 15);
			//do abs
			src0 = _mm_xor_si128(src0, sign0);
			src1 = _mm_xor_si128(src1, sign1);
			src0 = _mm_sub_epi16(src0, sign0);
			src1 = _mm_sub_epi16(src1, sign1);
			//convert int16 to int32
			r0 = _mm_unpacklo_epi16(src0, src0);	
			r1 = _mm_unpackhi_epi16(src0, src0);	
			r2 = _mm_unpacklo_epi16(src1, src1);	
			r3 = _mm_unpackhi_epi16(src1, src1);	
			//do mult
			r0 = _mm_madd_epi16( r0, q0 );
			r1 = _mm_madd_epi16( r1, q0 );
			r2 = _mm_madd_epi16( r2, q0 );
			r3 = _mm_madd_epi16( r3, q0 );
			//do add
			r0 = _mm_add_epi32(r0, q0c);
			r1 = _mm_add_epi32(r1, q0c);
			r2 = _mm_add_epi32(r2, q0c);
			r3 = _mm_add_epi32(r3, q0c);
			//scale down
			r0 = _mm_srli_epi32(r0, q_bits);
			r1 = _mm_srli_epi32(r1, q_bits);
			r2 = _mm_srli_epi32(r2, q_bits);
			r3 = _mm_srli_epi32(r3, q_bits);
			//convert to int16
			__m128i dst0, dst1;
			dst0 = _mm_packs_epi32(r0, r1);
			dst1 = _mm_packs_epi32(r2, r3);
			//make sure value is small enough
			dst0 = _mm_min_epi16( dst0 , limit_high );
			dst1 = _mm_min_epi16( dst1 , limit_high );
			//put back sign
			dst0 = _mm_xor_si128(dst0, sign0);
			dst1 = _mm_xor_si128(dst1, sign1);
			dst0 = _mm_sub_epi16(dst0, sign0);
			dst1 = _mm_sub_epi16(dst1, sign1);
			//store res
			_mm_storeu_si128((__m128i*)(src_ptr), dst0);
			_mm_storeu_si128((__m128i*)(src_ptr+8), dst1);

			src_ptr += 16;
			qc_ptr += 16;
		}
	}
}

#define bugaty 0
#define bugatx 0

void DoQuantizeTest(short* orio,short* newo)
{
	UINT so,eo,sn,en;
	UINT diffo,diffn,diffnc;
	diffo = 0;
	diffn = 0;
	diffnc = 0;
	__declspec(align(32)) QWORD HIGH_LIMIT;
	HIGH_LIMIT = 0;
//	HIGH_LIMIT = 0xF7F0F7F0F7F0F7F0;


	for( int loop=0;loop<LOOP_TEST_COUNT;loop++)
	{
		so = GetTickCount();
		//do a full search motion estimation. This does not require to be correct. It is a speed test
		for( int local_loop=0;local_loop<LOOP_TEST_COUNT_INTERP;local_loop++)
		{
			for( int mby = 1+bugaty; mby < MB_Y_REF-2; mby++ )
				for( int mbx = 1+bugatx; mbx < MB_X_REF-2; mbx++ )
				{
					short* cura = orio + ( mby * MB_SIZE ) * REF_STRIDE + mbx * MB_SIZE;
//					quantize_w16_block_C2( (short*)cura, quant_coef_16x16[0], offset_intra_default_intra, 20, 16, &HIGH_LIMIT );
					quantize_w16_block_intr( (short*)cura, quant_coef_16x16[4], offset_intra_default_intra, 20, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr2( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 20, 16, &HIGH_LIMIT );
				}
		}
		eo = GetTickCount();
		diffo += eo - so;

		sn = GetTickCount();
		for( int local_loop=0;local_loop<LOOP_TEST_COUNT_INTERP;local_loop++)
		{
			for( int mby = 1+bugaty; mby < MB_Y_REF-2; mby++ )
				for( int mbx = 1+bugatx; mbx < MB_X_REF-2; mbx++ )
				{
					short* cura = newo + ( mby * MB_SIZE ) * REF_STRIDE + mbx * MB_SIZE;
//					quantize_w16_block_intr1( (short*)cura, quant_coef_16x16[0], offset_intra_default_intra, 20, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr2( (short*)cura, quant_coef_16x16_i[4], offset_intra_default_intra, 20, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr3( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 1, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr4( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 1, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr5( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 1, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr6( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 1, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr7( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 1, 16, &HIGH_LIMIT );
//					quantize_w16_block_intr8( (short*)cura, quant_coef_16x16_i[0], offset_intra_default_intra, 1, 16, &HIGH_LIMIT );
					quantize_w16_block_intr9( (short*)cura, quant_coef_16x16_i[4], offset_intra_default_intra, 20, 16, &HIGH_LIMIT );
				}
		}
		en = GetTickCount();
		diffn += en - sn;
//if( memcmp( newo,orio, MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) ) != 0 )
//	printf(" mismatch at loop %u\n",loop);
	}

	printf("Quantize NxN: MS for old algorithm : %u\n",diffo);
	printf("Quantize NxN: MS for new algorithm : %u\n",diffn);
	printf("Quantize: Results match : %s \n", memcmp( newo,orio, MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) ) == 0 ? "true":"false");
	//dump results in text file for investigation
	{
		FILE *f=fopen("old.txt","wt");
		if( f )
		{
			for(int y=MB_SIZE*(bugaty+1);y<MB_Y_REF * MB_SIZE;y++)
			{
				for(int x=MB_SIZE*(bugatx+1);x<MB_Y_REF * MB_SIZE;x++)
					fprintf(f,"%06d ",orio[y*REF_STRIDE+x]);
				fprintf(f,"\n");
			}
			fclose(f);
		}
		f=fopen("new.txt","wt");
		if( f )
		{
			for(int y=MB_SIZE*(bugaty+1);y<MB_Y_REF * MB_SIZE;y++)
			{
				for(int x=MB_SIZE*(bugatx+1);x<MB_Y_REF * MB_SIZE;x++)
					fprintf(f,"%06d ",newo[y*REF_STRIDE+x]);
				fprintf(f,"\n");
			}
			fclose(f);
		}
	}
}

int main()
{
	volatile int stride = MB_X_REF * MB_SIZE;
	short* orio = (short*)malloc( MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) );
	short* newo = (short*)malloc( MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) );
	memset( orio, 0, MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) );
	memset( newo, 0, MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) );
	for(int i=0;i<MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE;i++)
	{
		orio[i] = ( 2063 / 2 ) - ( i * 20) % ( 2063 );
	}
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+0]=-81;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+1]=2;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+2]=-1;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+3]=1;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+4]=-149;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+5]=13;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+6]=1;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+7]=4;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+8]=100;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+9]=-7;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+10]=2;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+11]=-1;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+12]=110;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+13]=-4;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+14]=-2;
orio[(MB_SIZE+0)*MB_X_REF * MB_SIZE+MB_SIZE+15]=-2;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+0]=40;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+1]=0;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+2]=0;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+3]=0;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+4]=75;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+5]=-20;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+6]=-1;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+7]=-5;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+8]=-7;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+9]=12;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+10]=-3;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+11]=1;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+12]=-37;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+13]=6;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+14]=3;
orio[(MB_SIZE+1)*MB_X_REF * MB_SIZE+MB_SIZE+15]=3;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+0]=19;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+1]=-6;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+2]=3;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+3]=-3;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+4]=41;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+5]=1;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+6]=-1;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+7]=-2;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+8]=2;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+9]=-3;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+10]=0;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+11]=1;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+12]=0;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+13]=0;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+14]=0;
orio[(MB_SIZE+2)*MB_X_REF * MB_SIZE+MB_SIZE+15]=0;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+0]=-5;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+1]=10;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+2]=-5;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+3]=5;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+4]=40;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+5]=5;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+6]=2;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+7]=5;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+8]=-1;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+9]=1;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+10]=1;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+11]=-2;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+12]=-1;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+13]=-2;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+14]=-1;
orio[(MB_SIZE+3)*MB_X_REF * MB_SIZE+MB_SIZE+15]=-1;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+0]=-129;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+1]=10;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+2]=-5;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+3]=5;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+4]=-184;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+5]=37;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+6]=6;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+7]=1;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+8]=112;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+9]=-34;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+10]=0;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+11]=-2;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+12]=128;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+13]=0;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+14]=0;
orio[(MB_SIZE+4)*MB_X_REF * MB_SIZE+MB_SIZE+15]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+0]=6;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+1]=4;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+2]=-2;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+3]=2;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+4]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+5]=-6;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+6]=-4;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+7]=2;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+8]=-8;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+9]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+10]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+11]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+12]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+13]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+14]=0;
orio[(MB_SIZE+5)*MB_X_REF * MB_SIZE+MB_SIZE+15]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+0]=3;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+1]=2;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+2]=-1;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+3]=1;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+4]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+5]=-3;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+6]=-2;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+7]=1;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+8]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+9]=6;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+10]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+11]=-2;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+12]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+13]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+14]=0;
orio[(MB_SIZE+6)*MB_X_REF * MB_SIZE+MB_SIZE+15]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+0]=3;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+1]=2;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+2]=-1;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+3]=1;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+4]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+5]=-3;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+6]=-2;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+7]=1;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+8]=-4;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+9]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+10]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+11]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+12]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+13]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+14]=0;
orio[(MB_SIZE+7)*MB_X_REF * MB_SIZE+MB_SIZE+15]=0;

	memcpy( newo, orio, MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) );
	if( memcmp( newo,orio, MB_X_REF * MB_SIZE * MB_Y_REF * MB_SIZE * sizeof( short ) ) != 0 )
		printf("Input does not match. It should !\n");

	DoQuantizeTest( orio, newo );

	getch();
	free( orio );
	free( newo );
	return 0;
}